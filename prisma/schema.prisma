datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  engineType    = "binary"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products      Product[]        @relation("UserProducts")
  blogPosts     BlogPost[]       @relation("UserBlogPosts")
  orders        Order[]          @relation("UserOrders")
  contactEntries ContactEntry[]  @relation("UserContactEntries")
}

model Product {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String
  price       Decimal   @db.Decimal(10, 2)
  inventory   Int       @default(0)
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  authorId    String
  author      User      @relation("UserProducts", fields: [authorId], references: [id])
  orderItems  OrderItem[]
  featuredImageId String?
  featuredImage   Media?       @relation("ProductFeaturedImage", fields: [featuredImageId], references: [id])
  gallery         ProductMedia[]
}

model Category {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  summary   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  products  Product[]
  featuredImageId String?
  featuredImage   Media?    @relation("CategoryFeaturedImage", fields: [featuredImageId], references: [id])
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  authorId    String
  author      User     @relation("UserBlogPosts", fields: [authorId], references: [id])
}

model Order {
  id          String      @id @default(cuid())
  status      OrderStatus @default(PENDING)
  total       Decimal     @db.Decimal(10, 2)
  customerId  String?
  customer    User?       @relation("UserOrders", fields: [customerId], references: [id])
  customerName String
  customerEmail String
  customerPhone String?
  shippingAddress String
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  items       OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  productId String
  orderId   String

  product   Product  @relation(fields: [productId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
}

model ContactEntry {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  userId    String?
  user      User?    @relation("UserContactEntries", fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Media {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  createdAt DateTime @default(now())

  productsFeatured   Product[]      @relation("ProductFeaturedImage")
  categoriesFeatured Category[]     @relation("CategoryFeaturedImage")
  productGallery     ProductMedia[]
  heroBackgrounds    HeroMedia[]    @relation("HeroBackgroundMedia")
}

model ProductMedia {
  id        String   @id @default(cuid())
  position  Int      @default(0)
  productId String
  mediaId   String

  product Product @relation(fields: [productId], references: [id])
  media   Media   @relation(fields: [mediaId], references: [id])

  @@unique([productId, mediaId])
}

model HeroMedia {
  id                String   @id @default(cuid())
  key               String   @unique
  title             String?
  subtitle          String?
  description       String?
  ctaLabel          String?
  ctaHref           String?
  backgroundImageId String?
  backgroundImage   Media?   @relation("HeroBackgroundMedia", fields: [backgroundImageId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}
