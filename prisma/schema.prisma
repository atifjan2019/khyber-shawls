generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  name           String?
  password       String
  role           String         @default("user")
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  blogPosts      BlogPost[]     @relation("UserBlogPosts")
  contactEntries ContactEntry[]

  @@map("users")
}

model ContactEntry {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String   @db.Text
  userId    String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])

  @@index([userId], map: "contact_entries_userId_fkey")
  @@map("contact_entries")
}

model Category {
  id               String    @id @default(cuid())
  name             String    @unique
  slug             String    @unique
  summary          String?
  featuredImageUrl String?
  featuredImageAlt String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  products         Product[]

  @@map("categories")
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String      @db.Text
  price       Float
  image       String
  categoryId  String
  inStock     Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  category    Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@index([categoryId], map: "products_categoryId_fkey")
  @@map("products")
}

model Customer {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  address   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]

  @@map("customers")
}

model Order {
  id         String      @id @default(cuid())
  customerId String
  total      Float
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  items      OrderItem[]
  customer   Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId], map: "orders_customerId_fkey")
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "order_items_orderId_fkey")
  @@index([productId], map: "order_items_productId_fkey")
  @@map("order_items")
}

model BlogPost {
  id        String   @id @default(cuid())
  title     String
  slug      String   @unique
  excerpt   String?
  content   String   @db.Text
  published Boolean  @default(false)
  authorId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     String?
  author    User?    @relation("UserBlogPosts", fields: [authorId], references: [id])

  @@index([authorId], map: "blog_post_authorId_fkey")
  @@map("blog_post")
}

model Media {
  id        String      @id @default(cuid())
  url       String
  alt       String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  heroes    HeroMedia[]

  @@map("media")
}

model HeroMedia {
  id                String   @id @default(cuid())
  key               String   @unique
  title             String?
  subtitle          String?
  description       String?
  ctaLabel          String?
  ctaHref           String?
  backgroundImageId String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  backgroundImage   Media?   @relation(fields: [backgroundImageId], references: [id])

  @@index([backgroundImageId], map: "hero_media_backgroundImageId_fkey")
  @@map("hero_media")
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Settings {
  id                String  @id @default(cuid())
  websiteName       String?
  websiteLogoUrl    String?
  websiteFaviconUrl String?
  contactPhone      String?
  contactEmail      String?
  contactAddress    String?
  smtpHost          String?
  smtpPort          Int?
  smtpUser          String?
  smtpPass          String?
  stripePublicKey   String?
  stripeSecretKey   String?
  socialLinks       Json?

  @@map("settings")
}
