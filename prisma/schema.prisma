// ---------------------------------------------
// Prisma Schema for KhyberShawls (Next.js + MySQL)
// ---------------------------------------------

generator client {
  provider = "prisma-client-js"
  // For Vercel, you can enable these:
  // binaryTargets = ["native", "rhel-openssl-3.0.x"]
  // engineType    = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ---------------------------------------------
// ENUMS
// ---------------------------------------------
enum Role {
  USER
  ADMIN
}

// ---------------------------------------------
// MODELS
// ---------------------------------------------

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  name         String?
  role         Role    @default(USER)
  passwordHash String

  products Product[] @relation("UserProducts")
  orders   Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

// ---------------------------------------------

model Category {
  id               String    @id @default(cuid())
  name             String
  slug             String    @unique
  summary          String?
  featuredImageUrl String?
  featuredImageAlt String?
  products         Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("category")
}

// ---------------------------------------------

model Media {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  createdAt DateTime @default(now())

  // âœ… Reverse relations added to satisfy Prisma
  featuredInProducts Product[]      @relation("ProductFeaturedImage")
  productMedia       ProductMedia[]
  heroBackgrounds    HeroMedia[]    @relation("HeroBackgroundImage")
}

// ---------------------------------------------

model Product {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  description String
  price       Decimal   @db.Decimal(10, 2)
  inventory   Int       @default(0)
  published   Boolean   @default(false)
  deletedAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  authorId String
  author   User   @relation("UserProducts", fields: [authorId], references: [id])

  orderItems OrderItem[]

  featuredImageId String?
  featuredImage   Media?  @relation("ProductFeaturedImage", fields: [featuredImageId], references: [id], onDelete: SetNull)

  gallery ProductMedia[]

  @@map("product")
}

// ---------------------------------------------

model ProductMedia {
  id String @id @default(cuid())

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  mediaId String
  media   Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_media")
}

// ---------------------------------------------

model Order {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  total     Decimal  @db.Decimal(10, 2)
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items OrderItem[]

  @@map("order")
}

// ---------------------------------------------

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int     @default(1)
  price     Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_item")
}

// ---------------------------------------------
// HERO MEDIA
// ---------------------------------------------
model HeroMedia {
  id                String   @id @default(cuid())
  key               String   @unique
  title             String
  subtitle          String?
  backgroundImageId String?
  backgroundImage   Media?   @relation("HeroBackgroundImage", fields: [backgroundImageId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("hero_media")
}
